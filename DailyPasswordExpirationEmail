<#
.Synopsis
   Send Automated Email Reminders when Users Passwords are going to Expire starting at 7 days out from expiration
   Version 3.0.2023
   Created By Jason Plimpton AccountabilIT, LLC
   Requires: Windows PowerShell Module for Active Directory
#>
#param(
    # $smtpServer Enter Your SMTP Server Hostname or IP Address
#    [Parameter(Mandatory=$TRUE,Position=0)]
#    [ValidateNotNull()]
#    [string]$smtpServer,
    # Notify Users if Expiry Less than X Days
#    [Parameter(Mandatory=$TRUE,Position=1)]
#    [ValidateNotNull()]
#    [int]$expireInDays,
    # From Address, eg "IT Support <support@domain.com>"
#    [Parameter(Mandatory=$TRUE,Position=2)]
#    [ValidateNotNull()]
#    [string]$from,
#    [Parameter(Position=3)]
#    [switch]$logging,
    # Log File Path
#    [Parameter(Position=4)]
#    [string]$logPath,
    # Testing Enabled
#    [Parameter(Position=5)]
#    [switch]$testing,
    # Test Recipient, eg recipient@domain.com
#    [Parameter(Position=6)]
#    [string]$testRecipient,
    # Output more detailed status to console
#    [Parameter(Position=7)]
#    [switch]$status,
    # Log file recipient
#    [Parameter(Position=8)]
#    [string]$reportto,
    # Notification Interval
#    [Parameter(Position=9)]
#    [array]$interval
#)
###################################################################################################################
$smtpServer="SMTP_SERVER"
$expireInDays=[int]7
$from="FROM_NAME <EMAIL>"
$status=[switch]$FALSE
$testing=[switch]$FALSE
$testRecipient="TEST_EMAIL_OPTIONAL"
$reportto="REQUIRED_EMAIL"
$logging=[switch]$TRUE
$logpath="c:\working\"
$start = [datetime]::Now
$midnight = $start.Date.AddDays(1)
$timeToMidnight = New-TimeSpan -Start $start -end $midnight.Date
$midnight2 = $start.Date.AddDays(2)
$timeToMidnight2 = New-TimeSpan -Start $start -end $midnight2.Date
$textEncoding = [System.Text.Encoding]::UTF8
$today = $start


$secPassword = ConvertTo-SecureString "SMTP_PASSWORD" -AsPlainText -Force
$user = "SMTP_USERNAME"
$credential = New-Object System.Management.Automation.PSCredential($user,$secPassword)

# Load AD Module
try{
    Import-Module ActiveDirectory -ErrorAction Stop
}
catch{
    Write-Warning "Unable to load Active Directory PowerShell Module"
}

$padVal = "20"
Write-Output "Script Loaded"
Write-Output "*** Settings Summary ***"
$smtpServerLabel = "SMTP Server".PadRight($padVal," ")
$expireInDaysLabel = "Expire in Days".PadRight($padVal," ")
$fromLabel = "From".PadRight($padVal," ")
$testLabel = "Testing".PadRight($padVal," ")
$testRecipientLabel = "Test Recipient".PadRight($padVal," ")
$logLabel = "Logging".PadRight($padVal," ")
$logPathLabel = "Log Path".PadRight($padVal," ")
$reportToLabel = "Report Recipient".PadRight($padVal," ")
$interValLabel = "Intervals".PadRight($padval," ")

if($testing)
{
    if(($testRecipient) -eq $null)
    {
        Write-Output "No Test Recipient Specified"
      }
}

if($logging)
{
    if(($logPath) -eq $null)
    {
        $logPath = $PSScriptRoot
    }
}

Write-Output "$smtpServerLabel : $smtpServer"
Write-Output "$expireInDaysLabel : $expireInDays"
Write-Output "$fromLabel : $from"
Write-Output "$logLabel : $logging"
Write-Output "$logPathLabel : $logPath"
Write-Output "$testLabel : $testing"
Write-Output "$testRecipientLabel : $testRecipient"
Write-Output "$reportToLabel : $reportto"
Write-Output "$interValLabel : $interval"
Write-Output "*".PadRight(25,"*")

$users = get-aduser -filter {(Enabled -eq $TRUE) -and (PasswordNeverExpires -eq $FALSE)} -properties Name, GivenName, Surname, PasswordNeverExpires, PasswordExpired, PasswordLastSet, EmailAddress | where { $_.passwordexpired -eq $FALSE }

$usersCount = ($users | Measure-Object).Count
Write-Output "Found $usersCount User Objects"

$defaultMaxPasswordAge = (Get-ADDefaultDomainPasswordPolicy -ErrorAction Stop).MaxPasswordAge.Days 
Write-Output "Domain Default Password Age: $defaultMaxPasswordAge"

$colUsers = @()

Write-Output "Process User Objects"
foreach ($user in $users)
{
    $Name = $user.Name
    $FirstName = $User.GivenName
    $LastName = $User.SurName
    $emailaddress = $user.EmailAddress
    $passwordSetDate = $user.PasswordLastSet
    $samAccountName = $user.SamAccountName
    $pwdLastSet = $user.PasswordLastSet
    $maxPasswordAge = $defaultMaxPasswordAge
    $PasswordPol = (Get-AduserResultantPasswordPolicy $user) 
    if (($PasswordPol) -ne $null)
    {
        $maxPasswordAge = ($PasswordPol).MaxPasswordAge.Days
    }
    $userObj = New-Object System.Object
    $expireson = $pwdLastSet.AddDays($maxPasswordAge)
    $daysToExpire = New-TimeSpan -Start $today -end $Expireson

    if(($daysToExpire.Days -eq "0") -and ($daysToExpire.TotalHours -le $timeToMidnight.TotalHours))
    {
        $userObj | Add-Member -Type NoteProperty -Name UserMessage -Value "today."
    }
    if(($daysToExpire.Days -eq "0") -and ($daysToExpire.TotalHours -gt $timeToMidnight.TotalHours) -or ($daysToExpire.Days -eq "1") -and ($daysToExpire.TotalHours -le $timeToMidnight2.TotalHours))
    {
        $userObj | Add-Member -Type NoteProperty -Name UserMessage -Value "tomorrow."
    }
    if(($daysToExpire.Days -ge "1") -and ($daysToExpire.TotalHours -gt $timeToMidnight2.TotalHours))
    {
        $days = $daysToExpire.TotalDays
        $days = [math]::Round($days)
        $userObj | Add-Member -Type NoteProperty -Name UserMessage -Value "in $days days."
    }
    $daysToExpire = [math]::Round($daysToExpire.TotalDays)
    $userObj | Add-Member -Type NoteProperty -Name UserName -Value $samAccountName
    $userObj | Add-Member -Type NoteProperty -Name Name -Value $Name
    $userObj | Add-Member -Type NoteProperty -Name FirstName -Value $FirstName
    $userObj | Add-Member -Type NoteProperty -Name LastName -Value $LastName
    $userObj | Add-Member -Type NoteProperty -Name EmailAddress -Value $emailAddress
    $userObj | Add-Member -Type NoteProperty -Name PasswordSet -Value $pwdLastSet
    $userObj | Add-Member -Type NoteProperty -Name DaysToExpire -Value $daysToExpire
    $userObj | Add-Member -Type NoteProperty -Name ExpiresOn -Value $expiresOn

    $colUsers += $userObj
}

$colUsersCount = ($colUsers | Measure-Object).Count
Write-Output "$colusersCount Users processed"

$notifyUsers = $colUsers | where { $_.DaysToExpire -le $expireInDays}
$notifiedUsers = @()
$notifyCount = ($notifyUsers | Measure-Object).Count
Write-Output "$notifyCount Users with expiring passwords within $expireInDays Days"

foreach ($user in $notifyUsers)
{

    $samAccountName = $user.UserName
    $emailAddress = $user.EmailAddress

    $name = ($user.FirstName + " " + $user.LastName)
    $messageDays = $user.UserMessage

    $subject="Your password will expire $messageDays"

    $body ="
       <font face=""verdana""> 
    Dear $name, 
    <p> Your AIT Password will expire $messageDays<br> 
    To change your password, please log into portal.office.com with your AIT account and update your password. 
    <p>The AIT Internal IT Team <br>  
    </P> 
    </font>" 

    if($testing)
    {
        $emailaddress = $testRecipient
    } 
    if(($emailaddress) -eq $null)
    {
        $emailaddress = $testRecipient    
    }
    $samLabel = $samAccountName.PadRight($padVal," ")
    try{
        if($interval)
        {
            $daysToExpire = [int]$user.DaysToExpire

            if(($interval) -contains($daysToExpire))
            {
                
                if($status)
                {
                    Write-Output "Sending Email : $samLabel : $emailAddress"
                }
                
                Send-Mailmessage -smtpServer $smtpServer -from $from -to $emailaddress -subject $subject -body $body -bodyasHTML -priority High -Encoding $textEncoding -Credential $credential -ErrorAction Stop
                $user | Add-Member -MemberType NoteProperty -Name SendMail -Value "OK"
            }
            else
            {
                
                if($status)
                {
                    Write-Output "Sending Email : $samLabel : $emailAddress : Skipped - Interval"
                }
                $user | Add-Member -MemberType NoteProperty -Name SendMail -Value "Skipped - Interval"
            }
        }
        else
        {
            
            if($status)
            {
                Write-Output "Sending Email : $samLabel : $emailAddress"
            }
            Send-Mailmessage -smtpServer $smtpServer -from $from -to $emailaddress -subject $subject -body $body -bodyasHTML -priority High -Encoding $textEncoding -Credential $credential -ErrorAction Stop
            $user | Add-Member -MemberType NoteProperty -Name SendMail -Value "OK"
        }
    }
    catch{
        $errorMessage = $_.exception.Message
        if($status)
        {
           $errorMessage
        }
        $user | Add-Member -MemberType NoteProperty -Name SendMail -Value $errorMessage    
    }
    $notifiedUsers += $user
}
if($logging)
{
    Write-Output "Creating Log File"
    $day = $today.Day
    $month = $today.Month
    $year = $today.Year
    $date = "$day-$month-$year"
    $logFileName = "$date-PasswordLog.csv"
    if(($logPath.EndsWith("\")))
    {
       $logPath = $logPath -replace ".$"
    }
    $logFile = $logPath, $logFileName -join "\"
    Write-Output "Log Output: $logfile"
    $notifiedUsers | Export-CSV $logFile
    if($reportTo)
    {
        $reportSubject = "Password Expiry Report"
        $reportBody = "Password Expiry Report Attached"
        try{
            Send-Mailmessage -smtpServer $smtpServer -from $from -to $reportTo -subject $reportSubject -body $reportbody -bodyasHTML -priority High -Encoding $textEncoding -Credential $credential -Attachments $logFile -ErrorAction Stop 
        }
        catch{
            $errorMessage = $_.Exception.Message
            Write-Output $errorMessage
        }
    }
}
$notifiedUsers | select UserName,Name,EmailAddress,PasswordSet,DaysToExpire,ExpiresOn | sort DaystoExpire | FT -autoSize

$stop = [datetime]::Now
$runTime = New-TimeSpan $start $stop
Write-Output "Script Runtime: $runtime"
